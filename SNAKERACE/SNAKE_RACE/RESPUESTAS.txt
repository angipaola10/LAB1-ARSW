1. Possible race conditions

	Es posible que dos o más serpientes llegen al mismo tiempo a una celda donde hay un ratón, un flecha o un rayo, puede que ambas validen al mismo
	tiempo que hay comida allí y las dos crezcan, lo que no debería ser así ya que solo hay un ratón, solo una de las dos debería crecer. 
		  
		Solución: Se ponen los métodos checkIfFood(Cell newCell), checkIfJumpPad(Cell newCell) y checkIfTurboBoost(Cell newCell) como sincronizados. 
		
2. An incorrect or inappropriate use of collections, considering its concurrent handling(For this increase the game speed and execute it multiples times 
	until an error has been raised).
	
	La siguiente excepción puede ser lanzada por métodos que han detectado modificaciones concurrentes de un objeto cuando dicha modificación no está
	permitida. Se hace un mal uso de la colección usada para representar el cuerpo de la serpiente, pues a medida que la serpiente se va a dibujando esta 
	va creciendo, es decir se va modificando la lista.
		  
		Solución: Cambiar el tipo de colección usada para almacenar los componentes del cuerpo de una serpiente por ConcurrentLinkedDeque<Cell>;
	
3. Unnecessary use of active waits
    
	Se presenta una espera innecesaria en el método init() SnakeApp, pues este usa un while para evaluar constantemente si las serpientes están vivas,
	cuando ya no queda ninguna serpiente viva imprime el estado de los hilos y termina el programa.
		  
		Solución: En SnakeApp crear un contador para llevar el número de serpientes muertas y un método sincronizado para sumar uno a dicho contador, en
		este método también se evalúa si el numéro de serpientes muertas alcanzó el numero máximo de hilos para imprimir el estado de ellos y finalizar 
		el programa. 